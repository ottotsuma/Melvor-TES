declare class ArtisanMenuElement<ProductItem extends Item = Item> extends HTMLElement implements CustomElement {
    get $template(): string;
    _content: DocumentFragment;
    productImage: HTMLImageElement;
    productQuantity: HTMLElement;
    productName: HTMLSpanElement;
    productDescription: HTMLElement;
    selectedText: HTMLElement;
    viewStatsText: HTMLHeadingElement;
    productPreservation: PreservationIconElement;
    productDoubling: DoublingIconElement;
    productAdditionalPrimaryQuantity: AdditionalPrimaryQuantityIconElement;
    productCostReduction: CostReductionIconElement;
    mastery: MasteryDisplayElement;
    dropDownContainer: HTMLDivElement;
    recipeOptionsContainer: HTMLDivElement;
    requires: RequiresBoxElement;
    haves: HavesBoxElement;
    produces: ProducesBoxElement;
    grants: GrantsBoxElement;
    createButton: HTMLButtonElement;
    interval: IntervalIconElement;
    productIcon: ItemQuantityIconElement;
    recipeDropdownItems: QuantityIconsElement[];
    progressBar: ProgressBarElement;
    progressTimestamp: number;
    progressInterval: number;
    noneSelected: boolean;
    product?: ProductItem;
    constructor();
    connectedCallback(): void;
    init(skill: SkillWithMastery<MasteryAction, MasterySkillData>): void;
    setSelected(skill: SkillWithMastery<MasteryAction, MasterySkillData>, recipe: ArtisanSkillRecipe): void;
    setIngredients(items: AnyItemQuantity[], currencies: CurrencyQuantity[], game: Game): void;
    setIngredientsFromRecipe(recipe: ArtisanSkillRecipe, game: Game): void;
    setProduct(item: ProductItem, qty: number): void;
    updateQuantities(game: Game): void;
    updateGrants(xp: number, baseXP: number, masteryXP: number, baseMasteryXP: number, poolXP: number, realm: Realm): void;
    updateGrantsSources(skill: AnySkill, action?: NamedObject): void;
    updateAbyssalGrants(xp: number, baseXP: number): void;
    updateChances(preserveChance: number, preserveSources: HTMLSpanElement[], doublingChance: number, doublingSources: HTMLSpanElement[]): void;
    updateAdditionalPrimaryQuantity(qty: number, modifierSources: HTMLSpanElement[]): void;
    updateCostReduction(reduction: number, modifierSources: HTMLSpanElement[]): void;
    updateInterval(interval: number, modifierSources: HTMLSpanElement[]): void;
    setCreateCallback(callback: VoidFunction): void;
    animateProgressFromTimer(timer: Timer): void;
    startProgressBar(interval: number): void;
    stopProgressBar(): void;
    updateProgressBar(): void;
    hideRecipeDropdown(): void;
    showRecipeDropdown(): void;
    setRecipeDropdown(altRecipeIngredients: {
        items: AnyItemQuantity[];
        currencies: CurrencyQuantity[];
    }[], selectCallback: (recipeID: number) => VoidFunction, displayOrder?: number[]): void;
}
declare class HerbloreArtisanMenuElement extends ArtisanMenuElement<PotionItem> implements CustomElement {
    get $template(): string;
    tierContainer: HTMLHeadingElement;
    tierText: HTMLElement;
    tierImages: HTMLImageElement[];
    tierTooltips: TippyTooltip[];
    constructor();
    disconnectedCallback(): void;
    setProductTier(product: PotionItem, productTier: number): void;
    setPotionDescription(item: PotionItem, recipe: HerbloreRecipe): void;
    setSelected(skill: SkillWithMastery<MasteryAction, MasterySkillData>, recipe: ArtisanSkillRecipe): void;
    setProduct(item: PotionItem, qty: number): void;
}
